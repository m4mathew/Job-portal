(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular2-multiselect-dropdown', ['exports', '@angular/core', 'rxjs', '@angular/forms', '@angular/common'], factory) :
    (factory((global['angular2-multiselect-dropdown'] = {}),global.ng.core,global.rxjs,global.ng.forms,global.ng.common));
}(this, (function (exports,core,rxjs,forms,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var MyException = /** @class */ (function () {
        function MyException(status, body) {
            this.status = status;
            this.body = body;
        }
        return MyException;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ClickOutsideDirective = /** @class */ (function () {
        function ClickOutsideDirective(_elementRef) {
            this._elementRef = _elementRef;
            this.clickOutside = new core.EventEmitter();
        }
        /**
         * @param {?} event
         * @param {?} targetElement
         * @return {?}
         */
        ClickOutsideDirective.prototype.onClick = /**
         * @param {?} event
         * @param {?} targetElement
         * @return {?}
         */
            function (event, targetElement) {
                if (!targetElement) {
                    return;
                }
                /** @type {?} */
                var clickedInside = this._elementRef.nativeElement.contains(targetElement);
                if (!clickedInside) {
                    this.clickOutside.emit(event);
                }
            };
        ClickOutsideDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[clickOutside]'
                    },] }
        ];
        /** @nocollapse */
        ClickOutsideDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        ClickOutsideDirective.propDecorators = {
            clickOutside: [{ type: core.Output }],
            onClick: [{ type: core.HostListener, args: ['document:click', ['$event', '$event.target'],] }, { type: core.HostListener, args: ['document:touchstart', ['$event', '$event.target'],] }]
        };
        return ClickOutsideDirective;
    }());
    var ScrollDirective = /** @class */ (function () {
        function ScrollDirective(_elementRef) {
            this._elementRef = _elementRef;
            this.scroll = new core.EventEmitter();
        }
        /**
         * @param {?} event
         * @param {?} targetElement
         * @return {?}
         */
        ScrollDirective.prototype.onClick = /**
         * @param {?} event
         * @param {?} targetElement
         * @return {?}
         */
            function (event, targetElement) {
                this.scroll.emit(event);
            };
        ScrollDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[scroll]'
                    },] }
        ];
        /** @nocollapse */
        ScrollDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        ScrollDirective.propDecorators = {
            scroll: [{ type: core.Output }],
            onClick: [{ type: core.HostListener, args: ['scroll', ['$event'],] }]
        };
        return ScrollDirective;
    }());
    var styleDirective = /** @class */ (function () {
        function styleDirective(el) {
            this.el = el;
        }
        /**
         * @return {?}
         */
        styleDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.el.nativeElement.style.top = this.styleVal;
            };
        /**
         * @return {?}
         */
        styleDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.el.nativeElement.style.top = this.styleVal;
            };
        styleDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[styleProp]'
                    },] }
        ];
        /** @nocollapse */
        styleDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        styleDirective.propDecorators = {
            styleVal: [{ type: core.Input, args: ['styleProp',] }]
        };
        return styleDirective;
    }());
    var setPosition = /** @class */ (function () {
        function setPosition(el) {
            this.el = el;
        }
        /**
         * @return {?}
         */
        setPosition.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.height) {
                    this.el.nativeElement.style.bottom = parseInt(this.height + 15 + "") + 'px';
                }
            };
        /**
         * @return {?}
         */
        setPosition.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                if (this.height) {
                    this.el.nativeElement.style.bottom = parseInt(this.height + 15 + "") + 'px';
                }
            };
        setPosition.decorators = [
            { type: core.Directive, args: [{
                        selector: '[setPosition]'
                    },] }
        ];
        /** @nocollapse */
        setPosition.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        setPosition.propDecorators = {
            height: [{ type: core.Input, args: ['setPosition',] }]
        };
        return setPosition;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DataService = /** @class */ (function () {
        function DataService() {
            this.filteredData = [];
            this.subject = new rxjs.Subject();
        }
        /**
         * @param {?} data
         * @return {?}
         */
        DataService.prototype.setData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.filteredData = data;
                this.subject.next(data);
            };
        /**
         * @return {?}
         */
        DataService.prototype.getData = /**
         * @return {?}
         */
            function () {
                return this.subject.asObservable();
            };
        /**
         * @return {?}
         */
        DataService.prototype.getFilteredData = /**
         * @return {?}
         */
            function () {
                if (this.filteredData && this.filteredData.length > 0) {
                    return this.filteredData;
                }
                else {
                    return [];
                }
            };
        DataService.decorators = [
            { type: core.Injectable }
        ];
        return DataService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ListFilterPipe = /** @class */ (function () {
        function ListFilterPipe(ds) {
            this.ds = ds;
            this.filteredList = [];
        }
        /**
         * @param {?} items
         * @param {?} filter
         * @param {?} searchBy
         * @return {?}
         */
        ListFilterPipe.prototype.transform = /**
         * @param {?} items
         * @param {?} filter
         * @param {?} searchBy
         * @return {?}
         */
            function (items, filter, searchBy) {
                var _this = this;
                if (!items || !filter) {
                    this.ds.setData(items);
                    return items;
                }
                this.filteredList = items.filter(function (item) { return _this.applyFilter(item, filter, searchBy); });
                this.ds.setData(this.filteredList);
                return this.filteredList;
            };
        /**
         * @param {?} item
         * @param {?} filter
         * @param {?} searchBy
         * @return {?}
         */
        ListFilterPipe.prototype.applyFilter = /**
         * @param {?} item
         * @param {?} filter
         * @param {?} searchBy
         * @return {?}
         */
            function (item, filter, searchBy) {
                /** @type {?} */
                var found = false;
                if (searchBy.length > 0) {
                    if (item.grpTitle) {
                        found = true;
                    }
                    else {
                        for (var t = 0; t < searchBy.length; t++) {
                            if (filter && item[searchBy[t]] && item[searchBy[t]] != "") {
                                if (item[searchBy[t]].toString().toLowerCase().indexOf(filter.toLowerCase()) >= 0) {
                                    found = true;
                                }
                            }
                        }
                    }
                }
                else {
                    if (item.grpTitle) {
                        found = true;
                    }
                    else {
                        for (var prop in item) {
                            if (filter && item[prop]) {
                                if (item[prop].toString().toLowerCase().indexOf(filter.toLowerCase()) >= 0) {
                                    found = true;
                                }
                            }
                        }
                    }
                }
                return found;
            };
        ListFilterPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'listFilter',
                        pure: true
                    },] }
        ];
        /** @nocollapse */
        ListFilterPipe.ctorParameters = function () {
            return [
                { type: DataService }
            ];
        };
        return ListFilterPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Item = /** @class */ (function () {
        function Item() {
        }
        Item.decorators = [
            { type: core.Component, args: [{
                        selector: 'c-item',
                        template: ""
                    }] }
        ];
        /** @nocollapse */
        Item.ctorParameters = function () { return []; };
        Item.propDecorators = {
            template: [{ type: core.ContentChild, args: [core.TemplateRef,] }]
        };
        return Item;
    }());
    var Badge = /** @class */ (function () {
        function Badge() {
        }
        Badge.decorators = [
            { type: core.Component, args: [{
                        selector: 'c-badge',
                        template: ""
                    }] }
        ];
        /** @nocollapse */
        Badge.ctorParameters = function () { return []; };
        Badge.propDecorators = {
            template: [{ type: core.ContentChild, args: [core.TemplateRef,] }]
        };
        return Badge;
    }());
    var Search = /** @class */ (function () {
        function Search() {
        }
        Search.decorators = [
            { type: core.Component, args: [{
                        selector: 'c-search',
                        template: ""
                    }] }
        ];
        /** @nocollapse */
        Search.ctorParameters = function () { return []; };
        Search.propDecorators = {
            template: [{ type: core.ContentChild, args: [core.TemplateRef,] }]
        };
        return Search;
    }());
    var TemplateRenderer = /** @class */ (function () {
        function TemplateRenderer(viewContainer) {
            this.viewContainer = viewContainer;
        }
        /**
         * @return {?}
         */
        TemplateRenderer.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.view = this.viewContainer.createEmbeddedView(this.data.template, {
                    '\$implicit': this.data,
                    'item': this.item
                });
            };
        /**
         * @return {?}
         */
        TemplateRenderer.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.view.destroy();
            };
        TemplateRenderer.decorators = [
            { type: core.Component, args: [{
                        selector: 'c-templateRenderer',
                        template: ""
                    }] }
        ];
        /** @nocollapse */
        TemplateRenderer.ctorParameters = function () {
            return [
                { type: core.ViewContainerRef }
            ];
        };
        TemplateRenderer.propDecorators = {
            data: [{ type: core.Input }],
            item: [{ type: core.Input }]
        };
        return TemplateRenderer;
    }());
    var CIcon = /** @class */ (function () {
        function CIcon() {
        }
        CIcon.decorators = [
            { type: core.Component, args: [{
                        selector: 'c-icon',
                        template: "<svg *ngIf=\"name == 'remove'\" width=\"100%\" height=\"100%\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                        viewBox=\"0 0 47.971 47.971\" style=\"enable-background:new 0 0 47.971 47.971;\" xml:space=\"preserve\">\n                        <g>\n                            <path d=\"M28.228,23.986L47.092,5.122c1.172-1.171,1.172-3.071,0-4.242c-1.172-1.172-3.07-1.172-4.242,0L23.986,19.744L5.121,0.88\n                                c-1.172-1.172-3.07-1.172-4.242,0c-1.172,1.171-1.172,3.071,0,4.242l18.865,18.864L0.879,42.85c-1.172,1.171-1.172,3.071,0,4.242\n                                C1.465,47.677,2.233,47.97,3,47.97s1.535-0.293,2.121-0.879l18.865-18.864L42.85,47.091c0.586,0.586,1.354,0.879,2.121,0.879\n                                s1.535-0.293,2.121-0.879c1.172-1.171,1.172-3.071,0-4.242L28.228,23.986z\"/>\n                        </g>\n                    </svg>\n            <svg *ngIf=\"name == 'angle-down'\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"100%\" height=\"100%\" viewBox=\"0 0 612 612\" style=\"enable-background:new 0 0 612 612;\" xml:space=\"preserve\">\n<g>\n\t<g id=\"_x31_0_34_\">\n\t\t<g>\n\t\t\t<path d=\"M604.501,134.782c-9.999-10.05-26.222-10.05-36.221,0L306.014,422.558L43.721,134.782\n\t\t\t\tc-9.999-10.05-26.223-10.05-36.222,0s-9.999,26.35,0,36.399l279.103,306.241c5.331,5.357,12.422,7.652,19.386,7.296\n\t\t\t\tc6.988,0.356,14.055-1.939,19.386-7.296l279.128-306.268C614.5,161.106,614.5,144.832,604.501,134.782z\"/>\n\t\t</g>\n\t</g>\n</g>\n</svg>\n<svg *ngIf=\"name == 'angle-up'\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"100%\" height=\"100%\" viewBox=\"0 0 612 612\" style=\"enable-background:new 0 0 612 612;\" xml:space=\"preserve\">\n<g>\n\t<g id=\"_x39__30_\">\n\t\t<g>\n\t\t\t<path d=\"M604.501,440.509L325.398,134.956c-5.331-5.357-12.423-7.627-19.386-7.27c-6.989-0.357-14.056,1.913-19.387,7.27\n\t\t\t\tL7.499,440.509c-9.999,10.024-9.999,26.298,0,36.323s26.223,10.024,36.222,0l262.293-287.164L568.28,476.832\n\t\t\t\tc9.999,10.024,26.222,10.024,36.221,0C614.5,466.809,614.5,450.534,604.501,440.509z\"/>\n\t\t</g>\n\t</g>\n</g>\n\n</svg>\n<svg *ngIf=\"name == 'search'\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"100%\" height=\"100%\" viewBox=\"0 0 615.52 615.52\" style=\"enable-background:new 0 0 615.52 615.52;\"\n\t xml:space=\"preserve\">\n<g>\n\t<g>\n\t\t<g id=\"Search__x28_and_thou_shall_find_x29_\">\n\t\t\t<g>\n\t\t\t\t<path d=\"M602.531,549.736l-184.31-185.368c26.679-37.72,42.528-83.729,42.528-133.548C460.75,103.35,357.997,0,231.258,0\n\t\t\t\t\tC104.518,0,1.765,103.35,1.765,230.82c0,127.47,102.753,230.82,229.493,230.82c49.53,0,95.271-15.944,132.78-42.777\n\t\t\t\t\tl184.31,185.366c7.482,7.521,17.292,11.291,27.102,11.291c9.812,0,19.62-3.77,27.083-11.291\n\t\t\t\t\tC617.496,589.188,617.496,564.777,602.531,549.736z M355.9,319.763l-15.042,21.273L319.7,356.174\n\t\t\t\t\tc-26.083,18.658-56.667,28.526-88.442,28.526c-84.365,0-152.995-69.035-152.995-153.88c0-84.846,68.63-153.88,152.995-153.88\n\t\t\t\t\ts152.996,69.034,152.996,153.88C384.271,262.769,374.462,293.526,355.9,319.763z\"/>\n\t\t\t</g>\n\t\t</g>\n\t</g>\n</g>\n\n</svg>\n<svg *ngIf=\"name == 'clear'\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 51.976 51.976\" style=\"enable-background:new 0 0 51.976 51.976;\" xml:space=\"preserve\">\n<g>\n\t<path d=\"M44.373,7.603c-10.137-10.137-26.632-10.138-36.77,0c-10.138,10.138-10.137,26.632,0,36.77s26.632,10.138,36.77,0\n\t\tC54.51,34.235,54.51,17.74,44.373,7.603z M36.241,36.241c-0.781,0.781-2.047,0.781-2.828,0l-7.425-7.425l-7.778,7.778\n\t\tc-0.781,0.781-2.047,0.781-2.828,0c-0.781-0.781-0.781-2.047,0-2.828l7.778-7.778l-7.425-7.425c-0.781-0.781-0.781-2.048,0-2.828\n\t\tc0.781-0.781,2.047-0.781,2.828,0l7.425,7.425l7.071-7.071c0.781-0.781,2.047-0.781,2.828,0c0.781,0.781,0.781,2.047,0,2.828\n\t\tl-7.071,7.071l7.425,7.425C37.022,34.194,37.022,35.46,36.241,36.241z\"/>\n</g>\n</svg>",
                        encapsulation: core.ViewEncapsulation.None
                    }] }
        ];
        CIcon.propDecorators = {
            name: [{ type: core.Input }]
        };
        return CIcon;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var VirtualScrollComponent = /** @class */ (function () {
        function VirtualScrollComponent(element, renderer, zone) {
            this.element = element;
            this.renderer = renderer;
            this.zone = zone;
            this.window = window;
            this._enableUnequalChildrenSizes = false;
            this.useMarginInsteadOfTranslate = false;
            this._bufferAmount = 0;
            this.scrollAnimationTime = 750;
            this.resizeBypassRefreshTheshold = 5;
            this._checkResizeInterval = 1000;
            this._items = [];
            this.compareItems = function (item1, item2) { return item1 === item2; };
            this.update = new core.EventEmitter();
            this.vsUpdate = new core.EventEmitter();
            this.change = new core.EventEmitter();
            this.vsChange = new core.EventEmitter();
            this.start = new core.EventEmitter();
            this.vsStart = new core.EventEmitter();
            this.end = new core.EventEmitter();
            this.vsEnd = new core.EventEmitter();
            this.calculatedScrollbarWidth = 0;
            this.calculatedScrollbarHeight = 0;
            this.padding = 0;
            this.previousViewPort = /** @type {?} */ ({});
            this.cachedPageSize = 0;
            this.previousScrollNumberElements = 0;
            this.horizontal = false;
            this.scrollThrottlingTime = 0;
            this.resetWrapGroupDimensions();
        }
        Object.defineProperty(VirtualScrollComponent.prototype, "viewPortIndices", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var pageInfo = this.previousViewPort || /** @type {?} */ ({});
                return {
                    startIndex: pageInfo.startIndex || 0,
                    endIndex: pageInfo.endIndex || 0
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VirtualScrollComponent.prototype, "enableUnequalChildrenSizes", {
            get: /**
             * @return {?}
             */ function () {
                return this._enableUnequalChildrenSizes;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._enableUnequalChildrenSizes === value) {
                    return;
                }
                this._enableUnequalChildrenSizes = value;
                this.minMeasuredChildWidth = undefined;
                this.minMeasuredChildHeight = undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VirtualScrollComponent.prototype, "bufferAmount", {
            get: /**
             * @return {?}
             */ function () {
                return Math.max(this._bufferAmount, this.enableUnequalChildrenSizes ? 5 : 0);
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._bufferAmount = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VirtualScrollComponent.prototype, "scrollThrottlingTime", {
            get: /**
             * @return {?}
             */ function () {
                return this._scrollThrottlingTime;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this_1 = this;
                this._scrollThrottlingTime = value;
                this.refresh_throttled = /** @type {?} */ (this.throttleTrailing(function () {
                    _this_1.refresh_internal(false);
                }, this._scrollThrottlingTime));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VirtualScrollComponent.prototype, "checkResizeInterval", {
            get: /**
             * @return {?}
             */ function () {
                return this._checkResizeInterval;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._checkResizeInterval === value) {
                    return;
                }
                this._checkResizeInterval = value;
                this.addScrollEventHandlers();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VirtualScrollComponent.prototype, "items", {
            get: /**
             * @return {?}
             */ function () {
                return this._items;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value === this._items) {
                    return;
                }
                this._items = value || [];
                this.refresh_internal(true);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VirtualScrollComponent.prototype, "horizontal", {
            get: /**
             * @return {?}
             */ function () {
                return this._horizontal;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._horizontal = value;
                this.updateDirection();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.revertParentOverscroll = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var scrollElement = this.getScrollElement();
                if (scrollElement && this.oldParentScrollOverflow) {
                    scrollElement.style['overflow-y'] = this.oldParentScrollOverflow.y;
                    scrollElement.style['overflow-x'] = this.oldParentScrollOverflow.x;
                }
                this.oldParentScrollOverflow = undefined;
            };
        Object.defineProperty(VirtualScrollComponent.prototype, "parentScroll", {
            get: /**
             * @return {?}
             */ function () {
                return this._parentScroll;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._parentScroll === value) {
                    return;
                }
                this.revertParentOverscroll();
                this._parentScroll = value;
                this.addScrollEventHandlers();
                /** @type {?} */
                var scrollElement = this.getScrollElement();
                if (scrollElement !== this.element.nativeElement) {
                    this.oldParentScrollOverflow = { x: scrollElement.style['overflow-x'], y: scrollElement.style['overflow-y'] };
                    scrollElement.style['overflow-y'] = this.horizontal ? 'visible' : 'auto';
                    scrollElement.style['overflow-x'] = this.horizontal ? 'auto' : 'visible';
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.addScrollEventHandlers();
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.removeScrollEventHandlers();
                this.revertParentOverscroll();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        VirtualScrollComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var indexLengthChanged = this.cachedItemsLength !== this.items.length;
                this.cachedItemsLength = this.items.length;
                /** @type {?} */
                var firstRun = !changes.items || !changes.items.previousValue || changes.items.previousValue.length === 0;
                this.refresh_internal(indexLengthChanged || firstRun);
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                if (this.cachedItemsLength !== this.items.length) {
                    this.cachedItemsLength = this.items.length;
                    this.refresh_internal(true);
                }
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.refresh = /**
         * @return {?}
         */
            function () {
                this.refresh_internal(true);
            };
        /**
         * @param {?} item
         * @param {?=} alignToBeginning
         * @param {?=} additionalOffset
         * @param {?=} animationMilliseconds
         * @param {?=} animationCompletedCallback
         * @return {?}
         */
        VirtualScrollComponent.prototype.scrollInto = /**
         * @param {?} item
         * @param {?=} alignToBeginning
         * @param {?=} additionalOffset
         * @param {?=} animationMilliseconds
         * @param {?=} animationCompletedCallback
         * @return {?}
         */
            function (item, alignToBeginning, additionalOffset, animationMilliseconds, animationCompletedCallback) {
                if (alignToBeginning === void 0) {
                    alignToBeginning = true;
                }
                if (additionalOffset === void 0) {
                    additionalOffset = 0;
                }
                if (animationMilliseconds === void 0) {
                    animationMilliseconds = undefined;
                }
                if (animationCompletedCallback === void 0) {
                    animationCompletedCallback = undefined;
                }
                /** @type {?} */
                var index = this.items.indexOf(item);
                if (index === -1) {
                    return;
                }
                this.scrollToIndex(index, alignToBeginning, additionalOffset, animationMilliseconds, animationCompletedCallback);
            };
        /**
         * @param {?} index
         * @param {?=} alignToBeginning
         * @param {?=} additionalOffset
         * @param {?=} animationMilliseconds
         * @param {?=} animationCompletedCallback
         * @return {?}
         */
        VirtualScrollComponent.prototype.scrollToIndex = /**
         * @param {?} index
         * @param {?=} alignToBeginning
         * @param {?=} additionalOffset
         * @param {?=} animationMilliseconds
         * @param {?=} animationCompletedCallback
         * @return {?}
         */
            function (index, alignToBeginning, additionalOffset, animationMilliseconds, animationCompletedCallback) {
                var _this_1 = this;
                if (alignToBeginning === void 0) {
                    alignToBeginning = true;
                }
                if (additionalOffset === void 0) {
                    additionalOffset = 0;
                }
                if (animationMilliseconds === void 0) {
                    animationMilliseconds = undefined;
                }
                if (animationCompletedCallback === void 0) {
                    animationCompletedCallback = undefined;
                }
                /** @type {?} */
                var maxRetries = 5;
                /** @type {?} */
                var retryIfNeeded = function () {
                    --maxRetries;
                    if (maxRetries <= 0) {
                        if (animationCompletedCallback) {
                            animationCompletedCallback();
                        }
                        return;
                    }
                    /** @type {?} */
                    var dimensions = _this_1.calculateDimensions();
                    /** @type {?} */
                    var desiredStartIndex = Math.min(Math.max(index, 0), dimensions.itemCount - 1);
                    if (_this_1.previousViewPort.startIndex === desiredStartIndex) {
                        if (animationCompletedCallback) {
                            animationCompletedCallback();
                        }
                        return;
                    }
                    _this_1.scrollToIndex_internal(index, alignToBeginning, additionalOffset, 0, retryIfNeeded);
                };
                this.scrollToIndex_internal(index, alignToBeginning, additionalOffset, animationMilliseconds, retryIfNeeded);
            };
        /**
         * @param {?} index
         * @param {?=} alignToBeginning
         * @param {?=} additionalOffset
         * @param {?=} animationMilliseconds
         * @param {?=} animationCompletedCallback
         * @return {?}
         */
        VirtualScrollComponent.prototype.scrollToIndex_internal = /**
         * @param {?} index
         * @param {?=} alignToBeginning
         * @param {?=} additionalOffset
         * @param {?=} animationMilliseconds
         * @param {?=} animationCompletedCallback
         * @return {?}
         */
            function (index, alignToBeginning, additionalOffset, animationMilliseconds, animationCompletedCallback) {
                if (alignToBeginning === void 0) {
                    alignToBeginning = true;
                }
                if (additionalOffset === void 0) {
                    additionalOffset = 0;
                }
                if (animationMilliseconds === void 0) {
                    animationMilliseconds = undefined;
                }
                if (animationCompletedCallback === void 0) {
                    animationCompletedCallback = undefined;
                }
                animationMilliseconds = animationMilliseconds === undefined ? this.scrollAnimationTime : animationMilliseconds;
                /** @type {?} */
                var scrollElement = this.getScrollElement();
                /** @type {?} */
                var offset = this.getElementsOffset();
                /** @type {?} */
                var dimensions = this.calculateDimensions();
                /** @type {?} */
                var scroll = this.calculatePadding(index, dimensions, false) + offset + additionalOffset;
                if (!alignToBeginning) {
                    scroll -= dimensions.wrapGroupsPerPage * dimensions[this._childScrollDim];
                }
                if (!animationMilliseconds) {
                    this.renderer.setProperty(scrollElement, this._scrollType, scroll);
                    this.refresh_internal(false, animationCompletedCallback);
                    return;
                }
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.checkScrollElementResized = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var boundingRect = this.getScrollElement().getBoundingClientRect();
                /** @type {?} */
                var sizeChanged;
                if (!this.previousScrollBoundingRect) {
                    sizeChanged = true;
                }
                else {
                    /** @type {?} */
                    var widthChange = Math.abs(boundingRect.width - this.previousScrollBoundingRect.width);
                    /** @type {?} */
                    var heightChange = Math.abs(boundingRect.height - this.previousScrollBoundingRect.height);
                    sizeChanged = widthChange > this.resizeBypassRefreshTheshold || heightChange > this.resizeBypassRefreshTheshold;
                }
                if (sizeChanged) {
                    this.previousScrollBoundingRect = boundingRect;
                    if (boundingRect.width > 0 && boundingRect.height > 0) {
                        this.refresh_internal(false);
                    }
                }
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.updateDirection = /**
         * @return {?}
         */
            function () {
                if (this.horizontal) {
                    this._invisiblePaddingProperty = 'width';
                    this._offsetType = 'offsetLeft';
                    this._pageOffsetType = 'pageXOffset';
                    this._childScrollDim = 'childWidth';
                    this._marginDir = 'margin-left';
                    this._translateDir = 'translateX';
                    this._scrollType = 'scrollLeft';
                }
                else {
                    this._invisiblePaddingProperty = 'height';
                    this._offsetType = 'offsetTop';
                    this._pageOffsetType = 'pageYOffset';
                    this._childScrollDim = 'childHeight';
                    this._marginDir = 'margin-top';
                    this._translateDir = 'translateY';
                    this._scrollType = 'scrollTop';
                }
            };
        /**
         * @param {?} func
         * @param {?} wait
         * @return {?}
         */
        VirtualScrollComponent.prototype.throttleTrailing = /**
         * @param {?} func
         * @param {?} wait
         * @return {?}
         */
            function (func, wait) {
                /** @type {?} */
                var timeout = undefined;
                /** @type {?} */
                var result = function () {
                    /** @type {?} */
                    var _this = this;
                    /** @type {?} */
                    var _arguments = arguments;
                    if (timeout) {
                        return;
                    }
                    if (wait <= 0) {
                        func.apply(_this, _arguments);
                    }
                    else {
                        timeout = setTimeout(function () {
                            timeout = undefined;
                            func.apply(_this, _arguments);
                        }, wait);
                    }
                };
                return result;
            };
        /**
         * @param {?} itemsArrayModified
         * @param {?=} refreshCompletedCallback
         * @param {?=} maxRunTimes
         * @return {?}
         */
        VirtualScrollComponent.prototype.refresh_internal = /**
         * @param {?} itemsArrayModified
         * @param {?=} refreshCompletedCallback
         * @param {?=} maxRunTimes
         * @return {?}
         */
            function (itemsArrayModified, refreshCompletedCallback, maxRunTimes) {
                var _this_1 = this;
                if (refreshCompletedCallback === void 0) {
                    refreshCompletedCallback = undefined;
                }
                if (maxRunTimes === void 0) {
                    maxRunTimes = 2;
                }
                //note: maxRunTimes is to force it to keep recalculating if the previous iteration caused a re-render (different sliced items in viewport or scrollPosition changed).
                //The default of 2x max will probably be accurate enough without causing too large a performance bottleneck
                //The code would typically quit out on the 2nd iteration anyways. The main time it'd think more than 2 runs would be necessary would be for vastly different sized child items or if this is the 1st time the items array was initialized.
                //Without maxRunTimes, If the user is actively scrolling this code would become an infinite loop until they stopped scrolling. This would be okay, except each scroll event would start an additional infinte loop. We want to short-circuit it to prevent his.
                this.zone.runOutsideAngular(function () {
                    requestAnimationFrame(function () {
                        if (itemsArrayModified) {
                            _this_1.resetWrapGroupDimensions();
                        }
                        /** @type {?} */
                        var viewport = _this_1.calculateViewport();
                        /** @type {?} */
                        var startChanged = itemsArrayModified || viewport.startIndex !== _this_1.previousViewPort.startIndex;
                        /** @type {?} */
                        var endChanged = itemsArrayModified || viewport.endIndex !== _this_1.previousViewPort.endIndex;
                        /** @type {?} */
                        var scrollLengthChanged = viewport.scrollLength !== _this_1.previousViewPort.scrollLength;
                        /** @type {?} */
                        var paddingChanged = viewport.padding !== _this_1.previousViewPort.padding;
                        _this_1.previousViewPort = viewport;
                        if (scrollLengthChanged) {
                            _this_1.renderer.setStyle(_this_1.invisiblePaddingElementRef.nativeElement, _this_1._invisiblePaddingProperty, viewport.scrollLength + "px");
                        }
                        if (paddingChanged) {
                            if (_this_1.useMarginInsteadOfTranslate) {
                                _this_1.renderer.setStyle(_this_1.contentElementRef.nativeElement, _this_1._marginDir, viewport.padding + "px");
                            }
                            else {
                                _this_1.renderer.setStyle(_this_1.contentElementRef.nativeElement, 'transform', _this_1._translateDir + "(" + viewport.padding + "px)");
                                _this_1.renderer.setStyle(_this_1.contentElementRef.nativeElement, 'webkitTransform', _this_1._translateDir + "(" + viewport.padding + "px)");
                            }
                        }
                        if (startChanged || endChanged) {
                            _this_1.zone.run(function () {
                                // update the scroll list to trigger re-render of components in viewport
                                // update the scroll list to trigger re-render of components in viewport
                                _this_1.viewPortItems = viewport.startIndexWithBuffer >= 0 && viewport.endIndexWithBuffer >= 0 ? _this_1.items.slice(viewport.startIndexWithBuffer, viewport.endIndexWithBuffer + 1) : [];
                                _this_1.update.emit(_this_1.viewPortItems);
                                _this_1.vsUpdate.emit(_this_1.viewPortItems);
                                {
                                    if (startChanged) {
                                        _this_1.start.emit({ start: viewport.startIndex, end: viewport.endIndex });
                                        _this_1.vsStart.emit({ start: viewport.startIndex, end: viewport.endIndex });
                                    }
                                    if (endChanged) {
                                        _this_1.end.emit({ start: viewport.startIndex, end: viewport.endIndex });
                                        _this_1.vsEnd.emit({ start: viewport.startIndex, end: viewport.endIndex });
                                    }
                                    if (startChanged || endChanged) {
                                        _this_1.change.emit({ start: viewport.startIndex, end: viewport.endIndex });
                                        _this_1.vsChange.emit({ start: viewport.startIndex, end: viewport.endIndex });
                                    }
                                }
                                if (maxRunTimes > 0) {
                                    _this_1.refresh_internal(false, refreshCompletedCallback, maxRunTimes - 1);
                                    return;
                                }
                                if (refreshCompletedCallback) {
                                    refreshCompletedCallback();
                                }
                            });
                        }
                        else {
                            if (maxRunTimes > 0 && (scrollLengthChanged || paddingChanged)) {
                                _this_1.refresh_internal(false, refreshCompletedCallback, maxRunTimes - 1);
                                return;
                            }
                            if (refreshCompletedCallback) {
                                refreshCompletedCallback();
                            }
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.getScrollElement = /**
         * @return {?}
         */
            function () {
                return this.parentScroll instanceof Window ? document.scrollingElement || document.documentElement || document.body : this.parentScroll || this.element.nativeElement;
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.addScrollEventHandlers = /**
         * @return {?}
         */
            function () {
                var _this_1 = this;
                /** @type {?} */
                var scrollElement = this.getScrollElement();
                this.removeScrollEventHandlers();
                this.zone.runOutsideAngular(function () {
                    if (_this_1.parentScroll instanceof Window) {
                        _this_1.disposeScrollHandler = _this_1.renderer.listen('window', 'scroll', _this_1.refresh_throttled);
                        _this_1.disposeResizeHandler = _this_1.renderer.listen('window', 'resize', _this_1.refresh_throttled);
                    }
                    else {
                        _this_1.disposeScrollHandler = _this_1.renderer.listen(scrollElement, 'scroll', _this_1.refresh_throttled);
                        if (_this_1._checkResizeInterval > 0) {
                            _this_1.checkScrollElementResizedTimer = /** @type {?} */ (setInterval(function () { _this_1.checkScrollElementResized(); }, _this_1._checkResizeInterval));
                        }
                    }
                });
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.removeScrollEventHandlers = /**
         * @return {?}
         */
            function () {
                if (this.checkScrollElementResizedTimer) {
                    clearInterval(this.checkScrollElementResizedTimer);
                }
                if (this.disposeScrollHandler) {
                    this.disposeScrollHandler();
                    this.disposeScrollHandler = undefined;
                }
                if (this.disposeResizeHandler) {
                    this.disposeResizeHandler();
                    this.disposeResizeHandler = undefined;
                }
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.getElementsOffset = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var offset = 0;
                if (this.containerElementRef && this.containerElementRef.nativeElement) {
                    offset += this.containerElementRef.nativeElement[this._offsetType];
                }
                if (this.parentScroll) {
                    /** @type {?} */
                    var scrollElement = this.getScrollElement();
                    /** @type {?} */
                    var elementClientRect = this.element.nativeElement.getBoundingClientRect();
                    /** @type {?} */
                    var scrollClientRect = scrollElement.getBoundingClientRect();
                    if (this.horizontal) {
                        offset += elementClientRect.left - scrollClientRect.left;
                    }
                    else {
                        offset += elementClientRect.top - scrollClientRect.top;
                    }
                    if (!(this.parentScroll instanceof Window)) {
                        offset += scrollElement[this._scrollType];
                    }
                }
                return offset;
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.countItemsPerWrapGroup = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var propertyName = this.horizontal ? 'offsetLeft' : 'offsetTop';
                /** @type {?} */
                var children = ((this.containerElementRef && this.containerElementRef.nativeElement) || this.contentElementRef.nativeElement).children;
                /** @type {?} */
                var childrenLength = children ? children.length : 0;
                if (childrenLength === 0) {
                    return 1;
                }
                /** @type {?} */
                var firstOffset = children[0][propertyName];
                /** @type {?} */
                var result = 1;
                while (result < childrenLength && firstOffset === children[result][propertyName]) {
                    ++result;
                }
                return result;
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.getScrollPosition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var windowScrollValue = undefined;
                if (this.parentScroll instanceof Window) {
                    /** @type {?} */
                    var window;
                    windowScrollValue = window[this._pageOffsetType];
                }
                return windowScrollValue || this.getScrollElement()[this._scrollType] || 0;
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.resetWrapGroupDimensions = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var oldWrapGroupDimensions = this.wrapGroupDimensions;
                this.wrapGroupDimensions = {
                    maxChildSizePerWrapGroup: [],
                    numberOfKnownWrapGroupChildSizes: 0,
                    sumOfKnownWrapGroupChildWidths: 0,
                    sumOfKnownWrapGroupChildHeights: 0
                };
                if (!this.enableUnequalChildrenSizes || !oldWrapGroupDimensions || oldWrapGroupDimensions.numberOfKnownWrapGroupChildSizes === 0) {
                    return;
                }
                /** @type {?} */
                var itemsPerWrapGroup = this.countItemsPerWrapGroup();
                for (var wrapGroupIndex = 0; wrapGroupIndex < oldWrapGroupDimensions.maxChildSizePerWrapGroup.length; ++wrapGroupIndex) {
                    /** @type {?} */
                    var oldWrapGroupDimension = oldWrapGroupDimensions.maxChildSizePerWrapGroup[wrapGroupIndex];
                    if (!oldWrapGroupDimension || !oldWrapGroupDimension.items || !oldWrapGroupDimension.items.length) {
                        continue;
                    }
                    if (oldWrapGroupDimension.items.length !== itemsPerWrapGroup) {
                        return;
                    }
                    /** @type {?} */
                    var itemsChanged = false;
                    /** @type {?} */
                    var arrayStartIndex = itemsPerWrapGroup * wrapGroupIndex;
                    for (var i = 0; i < itemsPerWrapGroup; ++i) {
                        if (!this.compareItems(oldWrapGroupDimension.items[i], this.items[arrayStartIndex + i])) {
                            itemsChanged = true;
                            break;
                        }
                    }
                    if (!itemsChanged) {
                        ++this.wrapGroupDimensions.numberOfKnownWrapGroupChildSizes;
                        this.wrapGroupDimensions.sumOfKnownWrapGroupChildWidths += oldWrapGroupDimension.childWidth || 0;
                        this.wrapGroupDimensions.sumOfKnownWrapGroupChildHeights += oldWrapGroupDimension.childHeight || 0;
                        this.wrapGroupDimensions.maxChildSizePerWrapGroup[wrapGroupIndex] = oldWrapGroupDimension;
                    }
                }
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.calculateDimensions = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var scrollElement = this.getScrollElement();
                /** @type {?} */
                var itemCount = this.items.length;
                /** @type {?} */
                var maxCalculatedScrollBarSize = 25; // Note: Formula to auto-calculate doesn't work for ParentScroll, so we default to this if not set by consuming application
                this.calculatedScrollbarHeight = Math.max(Math.min(scrollElement.offsetHeight - scrollElement.clientHeight, maxCalculatedScrollBarSize), this.calculatedScrollbarHeight);
                this.calculatedScrollbarWidth = Math.max(Math.min(scrollElement.offsetWidth - scrollElement.clientWidth, maxCalculatedScrollBarSize), this.calculatedScrollbarWidth);
                /** @type {?} */
                var viewWidth = scrollElement.offsetWidth - (this.scrollbarWidth || this.calculatedScrollbarWidth || (this.horizontal ? 0 : maxCalculatedScrollBarSize));
                /** @type {?} */
                var viewHeight = scrollElement.offsetHeight - (this.scrollbarHeight || this.calculatedScrollbarHeight || (this.horizontal ? maxCalculatedScrollBarSize : 0));
                /** @type {?} */
                var content = (this.containerElementRef && this.containerElementRef.nativeElement) || this.contentElementRef.nativeElement;
                /** @type {?} */
                var itemsPerWrapGroup = this.countItemsPerWrapGroup();
                /** @type {?} */
                var wrapGroupsPerPage;
                /** @type {?} */
                var defaultChildWidth;
                /** @type {?} */
                var defaultChildHeight;
                if (!this.enableUnequalChildrenSizes) {
                    if (content.children.length > 0) {
                        if (!this.childWidth || !this.childHeight) {
                            if (!this.minMeasuredChildWidth && viewWidth > 0) {
                                this.minMeasuredChildWidth = viewWidth;
                            }
                            if (!this.minMeasuredChildHeight && viewHeight > 0) {
                                this.minMeasuredChildHeight = viewHeight;
                            }
                        }
                        /** @type {?} */
                        var child = content.children[0];
                        /** @type {?} */
                        var clientRect = child.getBoundingClientRect();
                        this.minMeasuredChildWidth = Math.min(this.minMeasuredChildWidth, clientRect.width);
                        this.minMeasuredChildHeight = Math.min(this.minMeasuredChildHeight, clientRect.height);
                    }
                    defaultChildWidth = this.childWidth || this.minMeasuredChildWidth || viewWidth;
                    defaultChildHeight = this.childHeight || this.minMeasuredChildHeight || viewHeight;
                    /** @type {?} */
                    var itemsPerRow = Math.max(Math.ceil(viewWidth / defaultChildWidth), 1);
                    /** @type {?} */
                    var itemsPerCol = Math.max(Math.ceil(viewHeight / defaultChildHeight), 1);
                    wrapGroupsPerPage = this.horizontal ? itemsPerRow : itemsPerCol;
                }
                else {
                    /** @type {?} */
                    var scrollOffset = scrollElement[this._scrollType] - (this.previousViewPort ? this.previousViewPort.padding : 0);
                    /** @type {?} */
                    var arrayStartIndex = this.previousViewPort.startIndexWithBuffer || 0;
                    /** @type {?} */
                    var wrapGroupIndex = Math.ceil(arrayStartIndex / itemsPerWrapGroup);
                    /** @type {?} */
                    var maxWidthForWrapGroup = 0;
                    /** @type {?} */
                    var maxHeightForWrapGroup = 0;
                    /** @type {?} */
                    var sumOfVisibleMaxWidths = 0;
                    /** @type {?} */
                    var sumOfVisibleMaxHeights = 0;
                    wrapGroupsPerPage = 0;
                    for (var i = 0; i < content.children.length; ++i) {
                        ++arrayStartIndex;
                        /** @type {?} */
                        var child = content.children[i];
                        /** @type {?} */
                        var clientRect = child.getBoundingClientRect();
                        maxWidthForWrapGroup = Math.max(maxWidthForWrapGroup, clientRect.width);
                        maxHeightForWrapGroup = Math.max(maxHeightForWrapGroup, clientRect.height);
                        if (arrayStartIndex % itemsPerWrapGroup === 0) {
                            /** @type {?} */
                            var oldValue = this.wrapGroupDimensions.maxChildSizePerWrapGroup[wrapGroupIndex];
                            if (oldValue) {
                                --this.wrapGroupDimensions.numberOfKnownWrapGroupChildSizes;
                                this.wrapGroupDimensions.sumOfKnownWrapGroupChildWidths -= oldValue.childWidth || 0;
                                this.wrapGroupDimensions.sumOfKnownWrapGroupChildHeights -= oldValue.childHeight || 0;
                            }
                            ++this.wrapGroupDimensions.numberOfKnownWrapGroupChildSizes;
                            /** @type {?} */
                            var items = this.items.slice(arrayStartIndex - itemsPerWrapGroup, arrayStartIndex);
                            this.wrapGroupDimensions.maxChildSizePerWrapGroup[wrapGroupIndex] = {
                                childWidth: maxWidthForWrapGroup,
                                childHeight: maxHeightForWrapGroup,
                                items: items
                            };
                            this.wrapGroupDimensions.sumOfKnownWrapGroupChildWidths += maxWidthForWrapGroup;
                            this.wrapGroupDimensions.sumOfKnownWrapGroupChildHeights += maxHeightForWrapGroup;
                            if (this.horizontal) {
                                /** @type {?} */
                                var maxVisibleWidthForWrapGroup = Math.min(maxWidthForWrapGroup, Math.max(viewWidth - sumOfVisibleMaxWidths, 0));
                                if (scrollOffset > 0) {
                                    /** @type {?} */
                                    var scrollOffsetToRemove = Math.min(scrollOffset, maxVisibleWidthForWrapGroup);
                                    maxVisibleWidthForWrapGroup -= scrollOffsetToRemove;
                                    scrollOffset -= scrollOffsetToRemove;
                                }
                                sumOfVisibleMaxWidths += maxVisibleWidthForWrapGroup;
                                if (maxVisibleWidthForWrapGroup > 0 && viewWidth >= sumOfVisibleMaxWidths) {
                                    ++wrapGroupsPerPage;
                                }
                            }
                            else {
                                /** @type {?} */
                                var maxVisibleHeightForWrapGroup = Math.min(maxHeightForWrapGroup, Math.max(viewHeight - sumOfVisibleMaxHeights, 0));
                                if (scrollOffset > 0) {
                                    /** @type {?} */
                                    var scrollOffsetToRemove = Math.min(scrollOffset, maxVisibleHeightForWrapGroup);
                                    maxVisibleHeightForWrapGroup -= scrollOffsetToRemove;
                                    scrollOffset -= scrollOffsetToRemove;
                                }
                                sumOfVisibleMaxHeights += maxVisibleHeightForWrapGroup;
                                if (maxVisibleHeightForWrapGroup > 0 && viewHeight >= sumOfVisibleMaxHeights) {
                                    ++wrapGroupsPerPage;
                                }
                            }
                            ++wrapGroupIndex;
                            maxWidthForWrapGroup = 0;
                            maxHeightForWrapGroup = 0;
                        }
                    }
                    /** @type {?} */
                    var averageChildWidth = this.wrapGroupDimensions.sumOfKnownWrapGroupChildWidths / this.wrapGroupDimensions.numberOfKnownWrapGroupChildSizes;
                    /** @type {?} */
                    var averageChildHeight = this.wrapGroupDimensions.sumOfKnownWrapGroupChildHeights / this.wrapGroupDimensions.numberOfKnownWrapGroupChildSizes;
                    defaultChildWidth = this.childWidth || averageChildWidth || viewWidth;
                    defaultChildHeight = this.childHeight || averageChildHeight || viewHeight;
                    if (this.horizontal) {
                        if (viewWidth > sumOfVisibleMaxWidths) {
                            wrapGroupsPerPage += Math.ceil((viewWidth - sumOfVisibleMaxWidths) / defaultChildWidth);
                        }
                    }
                    else {
                        if (viewHeight > sumOfVisibleMaxHeights) {
                            wrapGroupsPerPage += Math.ceil((viewHeight - sumOfVisibleMaxHeights) / defaultChildHeight);
                        }
                    }
                }
                /** @type {?} */
                var itemsPerPage = itemsPerWrapGroup * wrapGroupsPerPage;
                /** @type {?} */
                var pageCount_fractional = itemCount / itemsPerPage;
                /** @type {?} */
                var numberOfWrapGroups = Math.ceil(itemCount / itemsPerWrapGroup);
                /** @type {?} */
                var scrollLength = 0;
                /** @type {?} */
                var defaultScrollLengthPerWrapGroup = this.horizontal ? defaultChildWidth : defaultChildHeight;
                if (this.enableUnequalChildrenSizes) {
                    /** @type {?} */
                    var numUnknownChildSizes = 0;
                    for (var i = 0; i < numberOfWrapGroups; ++i) {
                        /** @type {?} */
                        var childSize = this.wrapGroupDimensions.maxChildSizePerWrapGroup[i] && this.wrapGroupDimensions.maxChildSizePerWrapGroup[i][this._childScrollDim];
                        if (childSize) {
                            scrollLength += childSize;
                        }
                        else {
                            ++numUnknownChildSizes;
                        }
                    }
                    scrollLength += Math.round(numUnknownChildSizes * defaultScrollLengthPerWrapGroup);
                }
                else {
                    scrollLength = numberOfWrapGroups * defaultScrollLengthPerWrapGroup;
                }
                return {
                    itemCount: itemCount,
                    itemsPerWrapGroup: itemsPerWrapGroup,
                    wrapGroupsPerPage: wrapGroupsPerPage,
                    itemsPerPage: itemsPerPage,
                    pageCount_fractional: pageCount_fractional,
                    childWidth: defaultChildWidth,
                    childHeight: defaultChildHeight,
                    scrollLength: scrollLength
                };
            };
        /**
         * @param {?} arrayStartIndexWithBuffer
         * @param {?} dimensions
         * @param {?} allowUnequalChildrenSizes_Experimental
         * @return {?}
         */
        VirtualScrollComponent.prototype.calculatePadding = /**
         * @param {?} arrayStartIndexWithBuffer
         * @param {?} dimensions
         * @param {?} allowUnequalChildrenSizes_Experimental
         * @return {?}
         */
            function (arrayStartIndexWithBuffer, dimensions, allowUnequalChildrenSizes_Experimental) {
                if (dimensions.itemCount === 0) {
                    return 0;
                }
                /** @type {?} */
                var defaultScrollLengthPerWrapGroup = dimensions[this._childScrollDim];
                /** @type {?} */
                var startingWrapGroupIndex = Math.ceil(arrayStartIndexWithBuffer / dimensions.itemsPerWrapGroup) || 0;
                if (!this.enableUnequalChildrenSizes) {
                    return defaultScrollLengthPerWrapGroup * startingWrapGroupIndex;
                }
                /** @type {?} */
                var numUnknownChildSizes = 0;
                /** @type {?} */
                var result = 0;
                for (var i = 0; i < startingWrapGroupIndex; ++i) {
                    /** @type {?} */
                    var childSize = this.wrapGroupDimensions.maxChildSizePerWrapGroup[i] && this.wrapGroupDimensions.maxChildSizePerWrapGroup[i][this._childScrollDim];
                    if (childSize) {
                        result += childSize;
                    }
                    else {
                        ++numUnknownChildSizes;
                    }
                }
                result += Math.round(numUnknownChildSizes * defaultScrollLengthPerWrapGroup);
                return result;
            };
        /**
         * @param {?} scrollPosition
         * @param {?} dimensions
         * @return {?}
         */
        VirtualScrollComponent.prototype.calculatePageInfo = /**
         * @param {?} scrollPosition
         * @param {?} dimensions
         * @return {?}
         */
            function (scrollPosition, dimensions) {
                /** @type {?} */
                var scrollPercentage = 0;
                if (this.enableUnequalChildrenSizes) {
                    /** @type {?} */
                    var numberOfWrapGroups = Math.ceil(dimensions.itemCount / dimensions.itemsPerWrapGroup);
                    /** @type {?} */
                    var totalScrolledLength = 0;
                    /** @type {?} */
                    var defaultScrollLengthPerWrapGroup = dimensions[this._childScrollDim];
                    for (var i = 0; i < numberOfWrapGroups; ++i) {
                        /** @type {?} */
                        var childSize = this.wrapGroupDimensions.maxChildSizePerWrapGroup[i] && this.wrapGroupDimensions.maxChildSizePerWrapGroup[i][this._childScrollDim];
                        if (childSize) {
                            totalScrolledLength += childSize;
                        }
                        else {
                            totalScrolledLength += defaultScrollLengthPerWrapGroup;
                        }
                        if (scrollPosition < totalScrolledLength) {
                            scrollPercentage = i / numberOfWrapGroups;
                            break;
                        }
                    }
                }
                else {
                    scrollPercentage = scrollPosition / dimensions.scrollLength;
                }
                /** @type {?} */
                var startingArrayIndex_fractional = Math.min(Math.max(scrollPercentage * dimensions.pageCount_fractional, 0), dimensions.pageCount_fractional) * dimensions.itemsPerPage;
                /** @type {?} */
                var maxStart = dimensions.itemCount - dimensions.itemsPerPage - 1;
                /** @type {?} */
                var arrayStartIndex = Math.min(Math.floor(startingArrayIndex_fractional), maxStart);
                arrayStartIndex -= arrayStartIndex % dimensions.itemsPerWrapGroup;
                /** @type {?} */
                var arrayEndIndex = Math.ceil(startingArrayIndex_fractional) + dimensions.itemsPerPage - 1;
                arrayEndIndex += (dimensions.itemsPerWrapGroup - ((arrayEndIndex + 1) % dimensions.itemsPerWrapGroup)); // round up to end of wrapGroup
                if (isNaN(arrayStartIndex)) {
                    arrayStartIndex = 0;
                }
                if (isNaN(arrayEndIndex)) {
                    arrayEndIndex = 0;
                }
                arrayStartIndex = Math.min(Math.max(arrayStartIndex, 0), dimensions.itemCount - 1);
                arrayEndIndex = Math.min(Math.max(arrayEndIndex, 0), dimensions.itemCount - 1);
                /** @type {?} */
                var bufferSize = this.bufferAmount * dimensions.itemsPerWrapGroup;
                /** @type {?} */
                var startIndexWithBuffer = Math.min(Math.max(arrayStartIndex - bufferSize, 0), dimensions.itemCount - 1);
                /** @type {?} */
                var endIndexWithBuffer = Math.min(Math.max(arrayEndIndex + bufferSize, 0), dimensions.itemCount - 1);
                return {
                    startIndex: arrayStartIndex,
                    endIndex: arrayEndIndex,
                    startIndexWithBuffer: startIndexWithBuffer,
                    endIndexWithBuffer: endIndexWithBuffer
                };
            };
        /**
         * @return {?}
         */
        VirtualScrollComponent.prototype.calculateViewport = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var dimensions = this.calculateDimensions();
                /** @type {?} */
                var offset = this.getElementsOffset();
                /** @type {?} */
                var scrollPosition = this.getScrollPosition();
                if (scrollPosition > dimensions.scrollLength && !(this.parentScroll instanceof Window)) {
                    scrollPosition = dimensions.scrollLength;
                }
                else {
                    scrollPosition -= offset;
                }
                scrollPosition = Math.max(0, scrollPosition);
                /** @type {?} */
                var pageInfo = this.calculatePageInfo(scrollPosition, dimensions);
                /** @type {?} */
                var newPadding = this.calculatePadding(pageInfo.startIndexWithBuffer, dimensions, true);
                /** @type {?} */
                var newScrollLength = dimensions.scrollLength;
                return {
                    startIndex: pageInfo.startIndex,
                    endIndex: pageInfo.endIndex,
                    startIndexWithBuffer: pageInfo.startIndexWithBuffer,
                    endIndexWithBuffer: pageInfo.endIndexWithBuffer,
                    padding: Math.round(newPadding),
                    scrollLength: Math.round(newScrollLength)
                };
            };
        VirtualScrollComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'virtual-scroll,[virtualScroll]',
                        exportAs: 'virtualScroll',
                        template: "\n    <div class=\"total-padding\" #invisiblePadding></div>\n    <div class=\"scrollable-content\" #content>\n      <ng-content></ng-content>\n    </div>\n  ",
                        host: {
                            '[class.horizontal]': "horizontal",
                            '[class.vertical]': "!horizontal",
                            '[class.selfScroll]': "!parentScroll"
                        },
                        styles: ["\n    :host {\n      position: relative;\n\t  display: block;\n      -webkit-overflow-scrolling: touch;\n    }\n\t\n\t:host.horizontal.selfScroll {\n      overflow-y: visible;\n      overflow-x: auto;\n\t}\n\t:host.vertical.selfScroll {\n      overflow-y: auto;\n      overflow-x: visible;\n\t}\n\t\n    .scrollable-content {\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      max-width: 100vw;\n      max-height: 100vh;\n      position: absolute;\n    }\n\n\t.scrollable-content ::ng-deep > * {\n\t\tbox-sizing: border-box;\n\t}\n\t\n\t:host.horizontal {\n\t\twhite-space: nowrap;\n\t}\n\t\n\t:host.horizontal .scrollable-content {\n\t\tdisplay: flex;\n\t}\n\t\n\t:host.horizontal .scrollable-content ::ng-deep > * {\n\t\tflex-shrink: 0;\n\t\tflex-grow: 0;\n\t\twhite-space: initial;\n\t}\n\t\n    .total-padding {\n      width: 1px;\n      opacity: 0;\n    }\n    \n    :host.horizontal .total-padding {\n      height: 100%;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        VirtualScrollComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 },
                { type: core.NgZone }
            ];
        };
        VirtualScrollComponent.propDecorators = {
            enableUnequalChildrenSizes: [{ type: core.Input }],
            useMarginInsteadOfTranslate: [{ type: core.Input }],
            scrollbarWidth: [{ type: core.Input }],
            scrollbarHeight: [{ type: core.Input }],
            childWidth: [{ type: core.Input }],
            childHeight: [{ type: core.Input }],
            bufferAmount: [{ type: core.Input }],
            scrollAnimationTime: [{ type: core.Input }],
            resizeBypassRefreshTheshold: [{ type: core.Input }],
            scrollThrottlingTime: [{ type: core.Input }],
            checkResizeInterval: [{ type: core.Input }],
            items: [{ type: core.Input }],
            compareItems: [{ type: core.Input }],
            horizontal: [{ type: core.Input }],
            parentScroll: [{ type: core.Input }],
            update: [{ type: core.Output }],
            vsUpdate: [{ type: core.Output }],
            change: [{ type: core.Output }],
            vsChange: [{ type: core.Output }],
            start: [{ type: core.Output }],
            vsStart: [{ type: core.Output }],
            end: [{ type: core.Output }],
            vsEnd: [{ type: core.Output }],
            contentElementRef: [{ type: core.ViewChild, args: ['content', { read: core.ElementRef },] }],
            invisiblePaddingElementRef: [{ type: core.ViewChild, args: ['invisiblePadding', { read: core.ElementRef },] }],
            containerElementRef: [{ type: core.ContentChild, args: ['container', { read: core.ElementRef },] }]
        };
        return VirtualScrollComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DROPDOWN_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return AngularMultiSelect; }),
        multi: true
    };
    /** @type {?} */
    var DROPDOWN_CONTROL_VALIDATION = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return AngularMultiSelect; }),
        multi: true,
    };
    /** @type {?} */
    var noop = function () {
    };
    var AngularMultiSelect = /** @class */ (function () {
        function AngularMultiSelect(_elementRef, cdr, ds) {
            this._elementRef = _elementRef;
            this.cdr = cdr;
            this.ds = ds;
            this.onSelect = new core.EventEmitter();
            this.onDeSelect = new core.EventEmitter();
            this.onSelectAll = new core.EventEmitter();
            this.onDeSelectAll = new core.EventEmitter();
            this.onOpen = new core.EventEmitter();
            this.onClose = new core.EventEmitter();
            this.onScrollToEnd = new core.EventEmitter();
            this.onFilterSelectAll = new core.EventEmitter();
            this.onFilterDeSelectAll = new core.EventEmitter();
            this.onAddFilterNewItem = new core.EventEmitter();
            this.isActive = false;
            this.isSelectAll = false;
            this.isFilterSelectAll = false;
            this.isInfiniteFilterSelectAll = false;
            this.chunkIndex = [];
            this.cachedItems = [];
            this.groupCachedItems = [];
            this.itemHeight = 41.6;
            this.filterLength = 0;
            this.infiniteFilterLength = 0;
            this.defaultSettings = {
                singleSelection: false,
                text: 'Select',
                enableCheckAll: true,
                selectAllText: 'Select All',
                unSelectAllText: 'UnSelect All',
                filterSelectAllText: 'Select all filtered results',
                filterUnSelectAllText: 'UnSelect all filtered results',
                enableSearchFilter: false,
                searchBy: [],
                maxHeight: 300,
                badgeShowLimit: 999999999999,
                classes: '',
                disabled: false,
                searchPlaceholderText: 'Search',
                showCheckbox: true,
                noDataLabel: 'No Data Available',
                searchAutofocus: true,
                lazyLoading: false,
                labelKey: 'itemName',
                primaryKey: 'id',
                position: 'bottom',
                enableFilterSelectAll: true,
                selectGroup: false,
                addNewItemOnFilter: false,
                addNewButtonText: "Add"
            };
            this.filteredList = [];
            this.onTouchedCallback = noop;
            this.onChangeCallback = noop;
        }
        /**
         * @return {?}
         */
        AngularMultiSelect.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.settings = Object.assign(this.defaultSettings, this.settings);
                if (this.settings.groupBy) {
                    this.groupedData = this.transformData(this.data, this.settings.groupBy);
                    this.groupCachedItems = this.cloneArray(this.groupedData);
                }
                this.cachedItems = this.cloneArray(this.data);
                if (this.settings.position == 'top') {
                    setTimeout(function () {
                        _this.selectedListHeight = { val: 0 };
                        _this.selectedListHeight.val = _this.selectedListElem.nativeElement.clientHeight;
                    });
                }
                this.subscription = this.ds.getData().subscribe(function (data) {
                    if (data) {
                        /** @type {?} */
                        var len = 0;
                        data.forEach(function (obj, i) {
                            if (!obj.hasOwnProperty('grpTitle')) {
                                len++;
                            }
                        });
                        _this.filterLength = len;
                        _this.onFilterChange(data);
                    }
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        AngularMultiSelect.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["data"] && !changes["data"].firstChange) {
                    if (this.settings.groupBy) {
                        this.groupedData = this.transformData(this.data, this.settings.groupBy);
                        if (this.data.length == 0) {
                            this.selectedItems = [];
                        }
                    }
                    this.cachedItems = this.cloneArray(this.data);
                }
                if (changes["settings"] && !changes["settings"].firstChange) {
                    this.settings = Object.assign(this.defaultSettings, this.settings);
                }
                if (changes["loading"]) {
                    console.log(this.loading);
                }
            };
        /**
         * @return {?}
         */
        AngularMultiSelect.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                if (this.selectedItems) {
                    if (this.selectedItems.length == 0 || this.data.length == 0 || this.selectedItems.length < this.data.length) {
                        this.isSelectAll = false;
                    }
                }
            };
        /**
         * @return {?}
         */
        AngularMultiSelect.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (this.settings.lazyLoading) ;
            };
        /**
         * @return {?}
         */
        AngularMultiSelect.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                if (this.selectedListElem.nativeElement.clientHeight && this.settings.position == 'top' && this.selectedListHeight) {
                    this.selectedListHeight.val = this.selectedListElem.nativeElement.clientHeight;
                    this.cdr.detectChanges();
                }
            };
        /**
         * @param {?} item
         * @param {?} index
         * @param {?} evt
         * @return {?}
         */
        AngularMultiSelect.prototype.onItemClick = /**
         * @param {?} item
         * @param {?} index
         * @param {?} evt
         * @return {?}
         */
            function (item, index, evt) {
                if (this.settings.disabled) {
                    return false;
                }
                /** @type {?} */
                var found = this.isSelected(item);
                /** @type {?} */
                var limit = this.selectedItems.length < this.settings.limitSelection ? true : false;
                if (!found) {
                    if (this.settings.limitSelection) {
                        if (limit) {
                            this.addSelected(item);
                            this.onSelect.emit(item);
                        }
                    }
                    else {
                        this.addSelected(item);
                        this.onSelect.emit(item);
                    }
                }
                else {
                    this.removeSelected(item);
                    this.onDeSelect.emit(item);
                }
                if (this.isSelectAll || this.data.length > this.selectedItems.length) {
                    this.isSelectAll = false;
                }
                if (this.data.length == this.selectedItems.length) {
                    this.isSelectAll = true;
                }
                if (this.settings.groupBy) {
                    this.updateGroupInfo(item);
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        AngularMultiSelect.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return null;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        AngularMultiSelect.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== undefined && value !== null && value !== '') {
                    if (this.settings.singleSelection) {
                        try {
                            if (value.length > 1) {
                                this.selectedItems = [value[0]];
                                throw new MyException(404, { "msg": "Single Selection Mode, Selected Items cannot have more than one item." });
                            }
                            else {
                                this.selectedItems = value;
                            }
                        }
                        catch (e) {
                            console.error(e.body.msg);
                        }
                    }
                    else {
                        if (this.settings.limitSelection) {
                            this.selectedItems = value.slice(0, this.settings.limitSelection);
                        }
                        else {
                            this.selectedItems = value;
                        }
                        if (this.selectedItems.length === this.data.length && this.data.length > 0) {
                            this.isSelectAll = true;
                        }
                    }
                }
                else {
                    this.selectedItems = [];
                }
            };
        //From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        AngularMultiSelect.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChangeCallback = fn;
            };
        //From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        AngularMultiSelect.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouchedCallback = fn;
            };
        /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        AngularMultiSelect.prototype.trackByFn = /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
            function (index, item) {
                return item[this.settings.primaryKey];
            };
        /**
         * @param {?} clickedItem
         * @return {?}
         */
        AngularMultiSelect.prototype.isSelected = /**
         * @param {?} clickedItem
         * @return {?}
         */
            function (clickedItem) {
                var _this = this;
                /** @type {?} */
                var found = false;
                this.selectedItems && this.selectedItems.forEach(function (item) {
                    if (clickedItem[_this.settings.primaryKey] === item[_this.settings.primaryKey]) {
                        found = true;
                    }
                });
                return found;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        AngularMultiSelect.prototype.addSelected = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (this.settings.singleSelection) {
                    this.selectedItems = [];
                    this.selectedItems.push(item);
                    this.closeDropdown();
                }
                else
                    this.selectedItems.push(item);
                this.onChangeCallback(this.selectedItems);
                this.onTouchedCallback(this.selectedItems);
            };
        /**
         * @param {?} clickedItem
         * @return {?}
         */
        AngularMultiSelect.prototype.removeSelected = /**
         * @param {?} clickedItem
         * @return {?}
         */
            function (clickedItem) {
                var _this = this;
                this.selectedItems && this.selectedItems.forEach(function (item) {
                    if (clickedItem[_this.settings.primaryKey] === item[_this.settings.primaryKey]) {
                        _this.selectedItems.splice(_this.selectedItems.indexOf(item), 1);
                    }
                });
                this.onChangeCallback(this.selectedItems);
                this.onTouchedCallback(this.selectedItems);
            };
        /**
         * @param {?} evt
         * @return {?}
         */
        AngularMultiSelect.prototype.toggleDropdown = /**
         * @param {?} evt
         * @return {?}
         */
            function (evt) {
                var _this = this;
                if (this.settings.disabled) {
                    return false;
                }
                this.isActive = !this.isActive;
                if (this.isActive) {
                    if (this.settings.searchAutofocus && this.searchInput && this.settings.enableSearchFilter && !this.searchTempl) {
                        setTimeout(function () {
                            _this.searchInput.nativeElement.focus();
                        }, 0);
                    }
                    this.onOpen.emit(true);
                }
                else {
                    this.onClose.emit(false);
                }
                evt.preventDefault();
            };
        /**
         * @return {?}
         */
        AngularMultiSelect.prototype.closeDropdown = /**
         * @return {?}
         */
            function () {
                if (this.searchInput && this.settings.lazyLoading) {
                    this.searchInput.nativeElement.value = "";
                    //this.data = [];
                    //this.data = this.cachedItems;
                }
                if (this.searchInput) {
                    this.searchInput.nativeElement.value = "";
                }
                this.filter = "";
                this.isActive = false;
                this.onClose.emit(false);
            };
        /**
         * @return {?}
         */
        AngularMultiSelect.prototype.toggleSelectAll = /**
         * @return {?}
         */
            function () {
                if (!this.isSelectAll) {
                    this.selectedItems = [];
                    if (this.settings.groupBy) {
                        this.groupedData.forEach(function (obj) {
                            obj.selected = true;
                        });
                    }
                    this.selectedItems = this.data.slice();
                    this.isSelectAll = true;
                    this.onChangeCallback(this.selectedItems);
                    this.onTouchedCallback(this.selectedItems);
                    this.onSelectAll.emit(this.selectedItems);
                }
                else {
                    if (this.settings.groupBy) {
                        this.groupedData.forEach(function (obj) {
                            obj.selected = false;
                        });
                    }
                    this.selectedItems = [];
                    this.isSelectAll = false;
                    this.onChangeCallback(this.selectedItems);
                    this.onTouchedCallback(this.selectedItems);
                    this.onDeSelectAll.emit(this.selectedItems);
                }
            };
        /**
         * @return {?}
         */
        AngularMultiSelect.prototype.toggleFilterSelectAll = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.isFilterSelectAll) {
                    /** @type {?} */
                    var added_1 = [];
                    if (this.settings.groupBy) {
                        this.groupedData.forEach(function (item) {
                            item.value.forEach(function (el) {
                                if (!_this.isSelected(el)) {
                                    _this.addSelected(el);
                                    added_1.push(el);
                                }
                            });
                        });
                    }
                    else {
                        this.ds.getFilteredData().forEach(function (item) {
                            if (!_this.isSelected(item)) {
                                _this.addSelected(item);
                                added_1.push(item);
                            }
                        });
                    }
                    this.isFilterSelectAll = true;
                    this.onFilterSelectAll.emit(added_1);
                }
                else {
                    /** @type {?} */
                    var removed_1 = [];
                    if (this.settings.groupBy) {
                        this.groupedData.forEach(function (item) {
                            item.value.forEach(function (el) {
                                if (_this.isSelected(el)) {
                                    _this.removeSelected(el);
                                    removed_1.push(el);
                                }
                            });
                        });
                    }
                    else {
                        this.ds.getFilteredData().forEach(function (item) {
                            if (_this.isSelected(item)) {
                                _this.removeSelected(item);
                                removed_1.push(item);
                            }
                        });
                    }
                    this.isFilterSelectAll = false;
                    this.onFilterDeSelectAll.emit(removed_1);
                }
            };
        /**
         * @return {?}
         */
        AngularMultiSelect.prototype.toggleInfiniteFilterSelectAll = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.isInfiniteFilterSelectAll) {
                    this.data.forEach(function (item) {
                        if (!_this.isSelected(item)) {
                            _this.addSelected(item);
                        }
                    });
                    this.isInfiniteFilterSelectAll = true;
                }
                else {
                    this.data.forEach(function (item) {
                        if (_this.isSelected(item)) {
                            _this.removeSelected(item);
                        }
                    });
                    this.isInfiniteFilterSelectAll = false;
                }
            };
        /**
         * @return {?}
         */
        AngularMultiSelect.prototype.clearSearch = /**
         * @return {?}
         */
            function () {
                if (this.settings.groupBy) {
                    this.filter = "";
                    this.groupedData = [];
                    this.groupedData = this.cloneArray(this.groupCachedItems);
                }
                else {
                    this.filter = "";
                    this.isFilterSelectAll = false;
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        AngularMultiSelect.prototype.onFilterChange = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                if (this.filter && this.filter == "" || data.length == 0) {
                    this.isFilterSelectAll = false;
                }
                /** @type {?} */
                var cnt = 0;
                data.forEach(function (item) {
                    if (!item.hasOwnProperty('grpTitle') && _this.isSelected(item)) {
                        cnt++;
                    }
                });
                if (cnt > 0 && this.filterLength == cnt) {
                    this.isFilterSelectAll = true;
                }
                else if (cnt > 0 && this.filterLength != cnt) {
                    this.isFilterSelectAll = false;
                }
                this.cdr.detectChanges();
            };
        /**
         * @param {?} arr
         * @return {?}
         */
        AngularMultiSelect.prototype.cloneArray = /**
         * @param {?} arr
         * @return {?}
         */
            function (arr) {
                if (Array.isArray(arr)) {
                    return JSON.parse(JSON.stringify(arr));
                }
                else if (typeof arr === 'object') {
                    throw 'Cannot clone array containing an object!';
                }
                else {
                    return arr;
                }
            };
        /**
         * @param {?} item
         * @return {?}
         */
        AngularMultiSelect.prototype.updateGroupInfo = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                var _this = this;
                this.groupedData.forEach(function (obj) {
                    /** @type {?} */
                    var cnt = 0;
                    if (obj.grpTitle && item[_this.settings.groupBy] == obj[_this.settings.groupBy]) {
                        if (obj.list) {
                            obj.list.forEach(function (el) {
                                if (_this.isSelected(el)) {
                                    cnt++;
                                }
                            });
                        }
                    }
                    if (obj.list && cnt === obj.list.length) {
                        obj.selected = true;
                    }
                    else {
                        obj.selected = false;
                    }
                });
            };
        /**
         * @param {?} arr
         * @param {?} field
         * @return {?}
         */
        AngularMultiSelect.prototype.transformData = /**
         * @param {?} arr
         * @param {?} field
         * @return {?}
         */
            function (arr, field) {
                var _this = this;
                /** @type {?} */
                var groupedObj = arr.reduce(function (prev, cur) {
                    if (!prev[cur[field]]) {
                        prev[cur[field]] = [cur];
                    }
                    else {
                        prev[cur[field]].push(cur);
                    }
                    return prev;
                }, {});
                /** @type {?} */
                var tempArr = [];
                Object.keys(groupedObj).map(function (x) {
                    /** @type {?} */
                    var obj = {};
                    obj["grpTitle"] = true;
                    obj[_this.settings.labelKey] = x;
                    obj[_this.settings.groupBy] = x;
                    obj['selected'] = false;
                    obj['list'] = [];
                    groupedObj[x].forEach(function (item) {
                        obj.list.push(item);
                    });
                    tempArr.push(obj);
                    obj.list.forEach(function (item) {
                        tempArr.push(item);
                    });
                });
                return tempArr;
            };
        /**
         * @param {?} evt
         * @return {?}
         */
        AngularMultiSelect.prototype.filterInfiniteList = /**
         * @param {?} evt
         * @return {?}
         */
            function (evt) {
                var _this = this;
                /** @type {?} */
                var filteredElems = [];
                if (this.settings.groupBy) {
                    this.groupedData = this.groupCachedItems.slice();
                }
                else {
                    this.data = this.cachedItems.slice();
                }
                if ((evt.target.value != null || evt.target.value != '') && !this.settings.groupBy) {
                    if (this.settings.searchBy.length > 0) {
                        for (var t = 0; t < this.settings.searchBy.length; t++) {
                            this.data.filter(function (el) {
                                if (el[_this.settings.searchBy[t].toString()].toString().toLowerCase().indexOf(evt.target.value.toString().toLowerCase()) >= 0) {
                                    filteredElems.push(el);
                                }
                            });
                            /*                    if (filter && item[searchBy[t]] && item[searchBy[t]] != "") {
                                                                        if (item[searchBy[t]].toString().toLowerCase().indexOf(filter.toLowerCase()) >= 0) {
                                                                            found = true;
                                                                        }
                                                                    }*/
                        }
                    }
                    else {
                        this.data.filter(function (el) {
                            for (var prop in el) {
                                if (el[prop].toString().toLowerCase().indexOf(evt.target.value.toString().toLowerCase()) >= 0) {
                                    filteredElems.push(el);
                                    break;
                                }
                            }
                        });
                    }
                    this.data = [];
                    this.data = filteredElems;
                    this.infiniteFilterLength = this.data.length;
                }
                if (evt.target.value.toString() != '' && this.settings.groupBy) {
                    this.groupedData.filter(function (el) {
                        if (el.hasOwnProperty('grpTitle')) {
                            filteredElems.push(el);
                        }
                        else {
                            for (var prop in el) {
                                if (el[prop].toString().toLowerCase().indexOf(evt.target.value.toString().toLowerCase()) >= 0) {
                                    filteredElems.push(el);
                                    break;
                                }
                            }
                        }
                    });
                    this.groupedData = [];
                    this.groupedData = filteredElems;
                    this.infiniteFilterLength = this.groupedData.length;
                }
                else if (evt.target.value.toString() == '' && this.cachedItems.length > 0) {
                    this.data = [];
                    this.data = this.cachedItems;
                    this.infiniteFilterLength = 0;
                }
            };
        /**
         * @return {?}
         */
        AngularMultiSelect.prototype.resetInfiniteSearch = /**
         * @return {?}
         */
            function () {
                this.filter = "";
                this.isInfiniteFilterSelectAll = false;
                this.data = [];
                this.data = this.cachedItems;
                this.groupedData = this.groupCachedItems;
                this.infiniteFilterLength = 0;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        AngularMultiSelect.prototype.onScrollEnd = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.onScrollToEnd.emit(e);
            };
        /**
         * @return {?}
         */
        AngularMultiSelect.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.subscription.unsubscribe();
            };
        /**
         * @param {?} item
         * @return {?}
         */
        AngularMultiSelect.prototype.selectGroup = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                var _this = this;
                if (item.selected) {
                    item.selected = false;
                    item.list.forEach(function (obj) {
                        _this.removeSelected(obj);
                    });
                }
                else {
                    item.selected = true;
                    item.list.forEach(function (obj) {
                        if (!_this.isSelected(obj)) {
                            _this.addSelected(obj);
                        }
                    });
                }
            };
        /**
         * @return {?}
         */
        AngularMultiSelect.prototype.addFilterNewItem = /**
         * @return {?}
         */
            function () {
                this.onAddFilterNewItem.emit(this.filter);
                this.filterPipe = new ListFilterPipe(this.ds);
                this.filterPipe.transform(this.data, this.filter, this.settings.searchBy);
            };
        AngularMultiSelect.decorators = [
            { type: core.Component, args: [{
                        selector: 'angular2-multiselect',
                        template: "<div class=\"cuppa-dropdown\" (clickOutside)=\"closeDropdown()\">\r\n    <div class=\"selected-list\" #selectedList>\r\n        <div class=\"c-btn\" (click)=\"toggleDropdown($event)\" [ngClass]=\"{'disabled': settings.disabled}\" [attr.tabindex]=\"0\">\r\n\r\n            <span *ngIf=\"selectedItems?.length == 0\">{{settings.text}}</span>\r\n            <span *ngIf=\"settings.singleSelection && !badgeTempl\">\r\n                <span *ngFor=\"let item of selectedItems;trackBy: trackByFn.bind(this);\">\r\n                    {{item[settings.labelKey]}}\r\n                </span>\r\n            </span>\r\n            <span class=\"c-list\" *ngIf=\"selectedItems?.length > 0 && settings.singleSelection && badgeTempl \">\r\n                <div class=\"c-token\" *ngFor=\"let item of selectedItems;trackBy: trackByFn.bind(this);let k = index\">\r\n                <span *ngIf=\"!badgeTempl\" class=\"c-label\">{{item[settings.labelKey]}}</span>\r\n\r\n            <span *ngIf=\"badgeTempl\" class=\"c-label\">\r\n                            <c-templateRenderer [data]=\"badgeTempl\" [item]=\"item\"></c-templateRenderer>\r\n                        </span>\r\n            <span class=\"c-remove\" (click)=\"onItemClick(item,k,$event)\">\r\n                <c-icon [name]=\"'remove'\"></c-icon>\r\n            </span>\r\n        </div>\r\n        </span>\r\n        <div class=\"c-list\" *ngIf=\"selectedItems?.length > 0 && !settings.singleSelection\">\r\n            <div class=\"c-token\" *ngFor=\"let item of selectedItems;trackBy: trackByFn.bind(this);let k = index\" [hidden]=\"k > settings.badgeShowLimit-1\">\r\n                <span *ngIf=\"!badgeTempl\" class=\"c-label\">{{item[settings.labelKey]}}</span>\r\n                <span *ngIf=\"badgeTempl\" class=\"c-label\">\r\n                    <c-templateRenderer [data]=\"badgeTempl\" [item]=\"item\"></c-templateRenderer>\r\n                </span>\r\n                <span class=\"c-remove\" (click)=\"onItemClick(item,k,$event)\">\r\n                    <c-icon [name]=\"'remove'\"></c-icon>\r\n                </span>\r\n            </div>\r\n        </div>\r\n        <span class=\"countplaceholder\" *ngIf=\"selectedItems?.length > settings.badgeShowLimit\">+{{selectedItems?.length - settings.badgeShowLimit }}</span>\r\n        <span *ngIf=\"!isActive\" class=\"c-angle-down\">\r\n    <c-icon [name]=\"'angle-down'\"></c-icon>\r\n            </span>\r\n        <span *ngIf=\"isActive\" class=\"c-angle-up\">\r\n            <c-icon [name]=\"'angle-up'\"></c-icon>\r\n\r\n            </span>\r\n    </div>\r\n</div>\r\n<div [setPosition]=\"selectedListHeight?.val\" class=\"dropdown-list\" [ngClass]=\"{'dropdown-list-top': settings.position == 'top'}\"\r\n    [hidden]=\"!isActive\">\r\n    <div [ngClass]=\"{'arrow-up': settings.position == 'bottom', 'arrow-down': settings.position == 'top'}\" class=\"arrow-2\"></div>\r\n    <div [ngClass]=\"{'arrow-up': settings.position == 'bottom', 'arrow-down': settings.position == 'top'}\"></div>\r\n    <div class=\"list-area\">\r\n        <div class=\"pure-checkbox select-all\" *ngIf=\"settings.enableCheckAll && !settings.singleSelection && !settings.limitSelection && data?.length > 0\"\r\n            (click)=\"toggleSelectAll()\">\r\n            <input *ngIf=\"settings.showCheckbox\" type=\"checkbox\" [checked]=\"isSelectAll\" [disabled]=\"settings.limitSelection == selectedItems?.length\"\r\n            />\r\n            <label>\r\n                <span [hidden]=\"isSelectAll\">{{settings.selectAllText}}</span>\r\n                <span [hidden]=\"!isSelectAll\">{{settings.unSelectAllText}}</span>\r\n            </label>\r\n            <img class=\"loading-icon\" *ngIf=\"loading\" src=\"assets/img/loading.gif\"/>\r\n        </div>\r\n        <div class=\"list-filter\" *ngIf=\"settings.enableSearchFilter\">\r\n            <span class=\"c-search\">\r\n                <c-icon [name]=\"'search'\"></c-icon>\r\n                </span>\r\n            <span *ngIf=\"!settings.lazyLoading\" [hidden]=\"filter == undefined || filter?.length == 0\" class=\"c-clear\" (click)=\"clearSearch()\">\r\n                <c-icon [name]=\"'clear'\"></c-icon>\r\n                </span>\r\n            <span *ngIf=\"settings.lazyLoading\" [hidden]=\"filter == undefined || filter?.length == 0\" class=\"c-clear\" (click)=\"resetInfiniteSearch()\">\r\n                <c-icon [name]=\"'clear'\"></c-icon>\r\n                </span>\r\n\r\n            <input class=\"c-input\" *ngIf=\"!settings.lazyLoading && !searchTempl\" #searchInput type=\"text\" [placeholder]=\"settings.searchPlaceholderText\"\r\n                [(ngModel)]=\"filter\">\r\n            <input class=\"c-input\" *ngIf=\"settings.lazyLoading && !searchTempl\" #searchInput type=\"text\" [placeholder]=\"settings.searchPlaceholderText\"\r\n                [(ngModel)]=\"filter\" (keyup)=\"filterInfiniteList($event)\">\r\n            <!--            <input class=\"c-input\" *ngIf=\"!settings.lazyLoading && !searchTempl && settings.groupBy\" #searchInput type=\"text\" [placeholder]=\"settings.searchPlaceholderText\"\r\n                [(ngModel)]=\"filter\" (keyup)=\"filterGroupList($event)\">-->\r\n            <c-templateRenderer *ngIf=\"searchTempl\" [data]=\"searchTempl\" [item]=\"item\"></c-templateRenderer>\r\n        </div>\r\n        <div class=\"filter-select-all\" *ngIf=\"!settings.lazyLoading && settings.enableFilterSelectAll\">\r\n            <div class=\"pure-checkbox select-all\" *ngIf=\"filter?.length > 0 && filterLength > 0\" (click)=\"toggleFilterSelectAll()\">\r\n                <input type=\"checkbox\" [checked]=\"isFilterSelectAll\" [disabled]=\"settings.limitSelection == selectedItems?.length\" />\r\n                <label>\r\n                <span [hidden]=\"isFilterSelectAll\">{{settings.filterSelectAllText}}</span>\r\n                <span [hidden]=\"!isFilterSelectAll\">{{settings.filterUnSelectAllText}}</span>\r\n            </label>\r\n            </div>\r\n            <label class=\"nodata-label\" *ngIf=\"filterLength == 0\" [hidden]=\"filter == undefined || filter?.length == 0\">{{settings.noDataLabel}}</label>\r\n            <div class=\"btn-container\" *ngIf=\"settings.addNewItemOnFilter && filterLength == 0\" [hidden]=\"filter == undefined || filter?.length == 0\">\r\n            <button class=\"c-btn btn-iceblue\" (click)=\"addFilterNewItem()\">{{settings.addNewButtonText}}</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"filter-select-all\" *ngIf=\"settings.lazyLoading && settings.enableFilterSelectAll\">\r\n            <div class=\"pure-checkbox select-all\" *ngIf=\"filter?.length > 0 && infiniteFilterLength > 0\" (click)=\"toggleInfiniteFilterSelectAll()\">\r\n                <input type=\"checkbox\" [checked]=\"isInfiniteFilterSelectAll\" [disabled]=\"settings.limitSelection == selectedItems?.length\"\r\n                />\r\n                <label>\r\n                <span [hidden]=\"isInfiniteFilterSelectAll\">{{settings.filterSelectAllText}}</span>\r\n                <span [hidden]=\"!isInfiniteFilterSelectAll\">{{settings.filterUnSelectAllText}}</span>\r\n            </label>\r\n            </div>\r\n        </div>\r\n\r\n        <div *ngIf=\"!settings.groupBy && !settings.lazyLoading && itemTempl == undefined\" [style.maxHeight]=\"settings.maxHeight+'px'\" style=\"overflow: auto;\">\r\n            <ul class=\"lazyContainer\">\r\n                <li *ngFor=\"let item of data | listFilter:filter : settings.searchBy; let i = index;\" (click)=\"onItemClick(item,i,$event)\"\r\n                    class=\"pure-checkbox\" [ngClass]=\"{'selected-item': isSelected(item) == true }\">\r\n                    <input *ngIf=\"settings.showCheckbox\" type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"\r\n                    />\r\n                    <label>{{item[settings.labelKey]}}</label>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        <div *ngIf=\"!settings.groupBy && settings.lazyLoading && itemTempl == undefined\" [style.maxHeight]=\"settings.maxHeight+'px'\" style=\"overflow: auto;\">\r\n            <virtual-scroll [items]=\"data\" (vsUpdate)=\"viewPortItems = $event\" (vsEnd)=\"onScrollEnd($event)\" [ngStyle]=\"{'height': settings.maxHeight+'px'}\">\r\n                <ul class=\"lazyContainer\">\r\n                    <li *ngFor=\"let item of viewPortItems | listFilter:filter : settings.searchBy; let i = index;\" (click)=\"onItemClick(item,i,$event)\"\r\n                        class=\"pure-checkbox\" [ngClass]=\"{'selected-item': isSelected(item) == true }\">\r\n                        <input *ngIf=\"settings.showCheckbox\" type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"\r\n                        />\r\n                        <label>{{item.id}} {{item[settings.labelKey]}}</label>\r\n                    </li>\r\n                </ul>\r\n            </virtual-scroll>\r\n        </div>\r\n        <div *ngIf=\"!settings.groupBy && !settings.lazyLoading && itemTempl != undefined\" [style.maxHeight]=\"settings.maxHeight+'px'\" style=\"overflow: auto;\">\r\n            <ul class=\"lazyContainer\">\r\n                <li *ngFor=\"let item of data | listFilter:filter : settings.searchBy; let i = index;\" (click)=\"onItemClick(item,i,$event)\"\r\n                    class=\"pure-checkbox\" [ngClass]=\"{'selected-item': isSelected(item) == true }\">\r\n                    <input *ngIf=\"settings.showCheckbox\" type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"\r\n                    />\r\n                    <label></label>\r\n                    <c-templateRenderer [data]=\"itemTempl\" [item]=\"item\"></c-templateRenderer>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        <div *ngIf=\"!settings.groupBy && settings.lazyLoading && itemTempl != undefined\" [style.maxHeight]=\"settings.maxHeight+'px'\" style=\"overflow: auto;\">\r\n            <virtual-scroll [items]=\"data\" (vsUpdate)=\"viewPortItems = $event\" (vsEnd)=\"onScrollEnd($event)\" [ngStyle]=\"{'height': settings.maxHeight+'px'}\">\r\n\r\n                <ul class=\"lazyContainer\">\r\n                    <li *ngFor=\"let item of viewPortItems | listFilter:filter : settings.searchBy; let i = index;\" (click)=\"onItemClick(item,i,$event)\"\r\n                        class=\"pure-checkbox\" [ngClass]=\"{'selected-item': isSelected(item) == true }\">\r\n                        <input *ngIf=\"settings.showCheckbox\" type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"\r\n                        />\r\n                        <label></label>\r\n                        <c-templateRenderer [data]=\"itemTempl\" [item]=\"item\"></c-templateRenderer>\r\n                    </li>\r\n                </ul>\r\n            </virtual-scroll>\r\n        </div>\r\n        <div *ngIf=\"settings.groupBy && settings.lazyLoading && itemTempl != undefined\" [style.maxHeight]=\"settings.maxHeight+'px'\" style=\"overflow: auto;\">\r\n            <virtual-scroll [items]=\"groupedData\" (vsUpdate)=\"viewPortItems = $event\" (vsEnd)=\"onScrollEnd($event)\" [ngStyle]=\"{'height': settings.maxHeight+'px'}\">\r\n            <ul class=\"lazyContainer\">\r\n                <span *ngFor=\"let item of viewPortItems | listFilter:filter : settings.searchBy; let i = index;\">\r\n                <li (click)=\"onItemClick(item,i,$event)\" *ngIf=\"!item.grpTitle\" [ngClass]=\"{'grp-title': item.grpTitle,'grp-item': !item.grpTitle}\" class=\"pure-checkbox\">\r\n                    <input *ngIf=\"settings.showCheckbox\" type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"\r\n                    />\r\n                    <label></label>\r\n                    <c-templateRenderer [data]=\"itemTempl\" [item]=\"item\"></c-templateRenderer>\r\n                </li>\r\n                <li *ngIf=\"item.grpTitle\" [ngClass]=\"{'grp-title': item.grpTitle,'grp-item': !item.grpTitle}\" class=\"pure-checkbox\">\r\n                    <input *ngIf=\"settings.showCheckbox\" type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"\r\n                    />\r\n                    <label></label>\r\n                    <c-templateRenderer [data]=\"itemTempl\" [item]=\"item\"></c-templateRenderer>\r\n                </li>\r\n                </span>\r\n            </ul>\r\n            </virtual-scroll>\r\n        </div>\r\n        <div *ngIf=\"settings.groupBy && !settings.lazyLoading && itemTempl != undefined\" [style.maxHeight]=\"settings.maxHeight+'px'\" style=\"overflow: auto;\">\r\n            <ul class=\"lazyContainer\">\r\n                <span *ngFor=\"let item of groupedData | listFilter:filter : settings.searchBy; let i = index;\">\r\n                    <li (click)=\"onItemClick(item,i,$event)\" *ngIf=\"!item.grpTitle\" [ngClass]=\"{'grp-title': item.grpTitle,'grp-item': !item.grpTitle}\" class=\"pure-checkbox\">\r\n                    <input *ngIf=\"settings.showCheckbox\" type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"\r\n                    />\r\n                    <label></label>\r\n                    <c-templateRenderer [data]=\"itemTempl\" [item]=\"item\"></c-templateRenderer>\r\n                </li>\r\n                <li *ngIf=\"item.grpTitle\" [ngClass]=\"{'grp-title': item.grpTitle,'grp-item': !item.grpTitle}\" class=\"pure-checkbox\">\r\n                    <input *ngIf=\"settings.showCheckbox\" type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"\r\n                    />\r\n                    <label></label>\r\n                    <c-templateRenderer [data]=\"itemTempl\" [item]=\"item\"></c-templateRenderer>\r\n                </li>\r\n                </span>\r\n            </ul>\r\n        </div>\r\n        <div *ngIf=\"settings.groupBy && settings.lazyLoading && itemTempl == undefined\" [style.maxHeight]=\"settings.maxHeight+'px'\" style=\"overflow: auto;\">\r\n            <virtual-scroll [items]=\"groupedData\" (vsUpdate)=\"viewPortItems = $event\" (vsEnd)=\"onScrollEnd($event)\" [ngStyle]=\"{'height': settings.maxHeight+'px'}\">\r\n                <ul class=\"lazyContainer\">\r\n                    <span *ngFor=\"let item of viewPortItems; let i = index;\">\r\n                <li  *ngIf=\"item.grpTitle\" [ngClass]=\"{'grp-title': item.grpTitle,'grp-item': !item.grpTitle, 'selected-item': isSelected(item) == true }\" class=\"pure-checkbox\">\r\n                    <input *ngIf=\"settings.showCheckbox && !item.grpTitle\" type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"\r\n                    />\r\n                    <label>{{item[settings.labelKey]}}</label>\r\n                </li>\r\n                <li (click)=\"onItemClick(item,i,$event)\" *ngIf=\"!item.grpTitle\" [ngClass]=\"{'grp-title': item.grpTitle,'grp-item': !item.grpTitle, 'selected-item': isSelected(item) == true }\" class=\"pure-checkbox\">\r\n                    <input *ngIf=\"settings.showCheckbox && !item.grpTitle\" type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"\r\n                    />\r\n                    <label>{{item[settings.labelKey]}}</label>\r\n                </li>\r\n                </span>\r\n                </ul>\r\n            </virtual-scroll>\r\n        </div>\r\n        <div *ngIf=\"settings.groupBy && !settings.lazyLoading && itemTempl == undefined\" [style.maxHeight]=\"settings.maxHeight+'px'\" style=\"overflow: auto;\">\r\n            <ul class=\"lazyContainer\">\r\n                <span *ngFor=\"let item of groupedData | listFilter:filter : settings.searchBy; let i = index;\">\r\n                    <li (click)=\"onItemClick(item,i,$event)\" *ngIf=\"!item.grpTitle\" [ngClass]=\"{'grp-title': item.grpTitle,'grp-item': !item.grpTitle}\" class=\"pure-checkbox\">\r\n                    <input *ngIf=\"settings.showCheckbox && !item.grpTitle\" type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"\r\n                    />\r\n                    <label>{{item[settings.labelKey]}}</label>\r\n                </li>\r\n                <li *ngIf=\"item.grpTitle && !settings.selectGroup\" [ngClass]=\"{'grp-title': item.grpTitle,'grp-item': !item.grpTitle}\" class=\"pure-checkbox\">\r\n                    <input *ngIf=\"settings.showCheckbox && settings.selectGroup\" type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"\r\n                    />\r\n                    <label>{{item[settings.labelKey]}}</label>\r\n                </li>\r\n                 <li  (click)=\"selectGroup(item)\" *ngIf=\"item.grpTitle && settings.selectGroup\" [ngClass]=\"{'grp-title': item.grpTitle,'grp-item': !item.grpTitle}\" class=\"pure-checkbox\">\r\n                    <input *ngIf=\"settings.showCheckbox && settings.selectGroup\" type=\"checkbox\" [checked]=\"item.selected\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"\r\n                    />\r\n                    <label>{{item[settings.labelKey]}}</label>\r\n                </li>\r\n                </span>\r\n            </ul>\r\n        </div>\r\n        <h5 class=\"list-message\" *ngIf=\"data?.length == 0\">{{settings.noDataLabel}}</h5>\r\n    </div>\r\n</div>\r\n</div>",
                        host: { '[class]': 'defaultSettings.classes' },
                        providers: [DROPDOWN_CONTROL_VALUE_ACCESSOR, DROPDOWN_CONTROL_VALIDATION],
                        encapsulation: core.ViewEncapsulation.None,
                        styles: ["virtual-scroll{display:block;width:100%}.cuppa-dropdown{position:relative}.c-btn{display:inline-block;border-width:1px;line-height:1.25;border-radius:3px;font-size:14px;padding:5px 10px;cursor:pointer}.c-btn.disabled{background:#ccc}.selected-list .c-list{float:left;padding:0;margin:0;width:calc(100% - 20px)}.selected-list .c-list .c-token{list-style:none;padding:2px 25px 2px 8px;border-radius:2px;margin-right:4px;margin-top:2px;float:left;position:relative}.selected-list .c-list .c-token .c-label{display:block;float:left}.selected-list .c-list .c-token .c-remove{position:absolute;right:8px;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);width:10px}.selected-list .c-list .c-token .c-remove svg{fill:#fff}.selected-list .fa-angle-down,.selected-list .fa-angle-up{font-size:15pt;position:absolute;right:10px;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.selected-list .c-angle-down,.selected-list .c-angle-up{width:15px;height:15px;position:absolute;right:10px;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);pointer-events:none}.selected-list .c-angle-down svg,.selected-list .c-angle-up svg{fill:#333}.selected-list .countplaceholder{position:absolute;right:30px;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.selected-list .c-btn{width:100%;padding:10px;cursor:pointer;display:flex;position:relative}.selected-list .c-btn .c-icon{position:absolute;right:5px;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.dropdown-list{position:absolute;padding-top:14px;width:100%;z-index:9999}.dropdown-list ul{padding:0;list-style:none;overflow:auto;margin:0}.dropdown-list ul li{padding:10px;cursor:pointer;text-align:left}.dropdown-list ul li:first-child{padding-top:10px}.dropdown-list ul li:last-child{padding-bottom:10px}.dropdown-list ::-webkit-scrollbar{width:8px}.dropdown-list ::-webkit-scrollbar-thumb{background:#ccc;border-radius:5px}.dropdown-list ::-webkit-scrollbar-track{background:#f2f2f2}.arrow-down,.arrow-up{width:0;height:0;border-left:13px solid transparent;border-right:13px solid transparent;border-bottom:15px solid #fff;margin-left:15px;position:absolute;top:0}.arrow-down{bottom:-14px;top:unset;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.arrow-2{border-bottom:15px solid #ccc;top:-1px}.arrow-down.arrow-2{top:unset;bottom:-16px}.list-area{border:1px solid #ccc;border-radius:3px;background:#fff;margin:0}.select-all{padding:10px;border-bottom:1px solid #ccc;text-align:left}.list-filter{border-bottom:1px solid #ccc;position:relative;padding-left:35px;height:35px}.list-filter input{border:0;width:100%;height:100%;padding:0}.list-filter input:focus{outline:0}.list-filter .c-search{position:absolute;top:9px;left:10px;width:15px;height:15px}.list-filter .c-search svg{fill:#888}.list-filter .c-clear{position:absolute;top:10px;right:10px;width:15px;height:15px}.list-filter .c-clear svg{fill:#888}.pure-checkbox input[type=checkbox]{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.pure-checkbox input[type=checkbox]:focus+label:before,.pure-checkbox input[type=checkbox]:hover+label:before{background-color:#f2f2f2}.pure-checkbox input[type=checkbox]:active+label:before{transition-duration:0s}.pure-checkbox input[type=checkbox]+label{position:relative;padding-left:2em;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;margin:0;font-weight:300}.pure-checkbox input[type=checkbox]+label:before{box-sizing:content-box;content:'';position:absolute;top:50%;left:0;width:14px;height:14px;margin-top:-9px;text-align:center;transition:.4s}.pure-checkbox input[type=checkbox]+label:after{box-sizing:content-box;content:'';position:absolute;-webkit-transform:scale(0);transform:scale(0);-webkit-transform-origin:50%;transform-origin:50%;transition:transform .2s ease-out,-webkit-transform .2s ease-out;background-color:transparent;top:50%;left:4px;width:8px;height:3px;margin-top:-4px;border-style:solid;border-color:#fff;border-width:0 0 3px 3px;-o-border-image:none;border-image:none;-webkit-transform:rotate(-45deg) scale(0);transform:rotate(-45deg) scale(0)}.pure-checkbox input[type=checkbox]:disabled+label:before{border-color:#ccc}.pure-checkbox input[type=checkbox]:disabled:focus+label:before .pure-checkbox input[type=checkbox]:disabled:hover+label:before{background-color:inherit}.pure-checkbox input[type=checkbox]:disabled:checked+label:before{background-color:#ccc}.pure-checkbox input[type=radio]:checked+label:before{background-color:#fff}.pure-checkbox input[type=radio]:checked+label:after{-webkit-transform:scale(1);transform:scale(1)}.pure-checkbox input[type=radio]+label:before{border-radius:50%}.pure-checkbox input[type=checkbox]:checked+label:after{content:'';transition:transform .2s ease-out,-webkit-transform .2s ease-out;-webkit-transform:rotate(-45deg) scale(1);transform:rotate(-45deg) scale(1)}.list-message{text-align:center;margin:0;padding:15px 0;font-size:initial}.list-grp{padding:0 15px!important}.list-grp h4{text-transform:capitalize;margin:15px 0 0;font-size:14px;font-weight:700}.list-grp>li{padding-left:15px!important}.grp-item{padding-left:30px!important}.grp-title{padding-bottom:0!important}.grp-title label{margin-bottom:0!important;font-weight:800;text-transform:capitalize}.grp-title:hover{background:0 0!important}.loading-icon{width:20px;float:right}.nodata-label{width:100%;text-align:center;padding:10px 0 0}.btn-container{text-align:center;padding:0 5px 10px}"]
                    }] }
        ];
        /** @nocollapse */
        AngularMultiSelect.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.ChangeDetectorRef },
                { type: DataService }
            ];
        };
        AngularMultiSelect.propDecorators = {
            data: [{ type: core.Input }],
            settings: [{ type: core.Input }],
            loading: [{ type: core.Input }],
            onSelect: [{ type: core.Output, args: ['onSelect',] }],
            onDeSelect: [{ type: core.Output, args: ['onDeSelect',] }],
            onSelectAll: [{ type: core.Output, args: ['onSelectAll',] }],
            onDeSelectAll: [{ type: core.Output, args: ['onDeSelectAll',] }],
            onOpen: [{ type: core.Output, args: ['onOpen',] }],
            onClose: [{ type: core.Output, args: ['onClose',] }],
            onScrollToEnd: [{ type: core.Output, args: ['onScrollToEnd',] }],
            onFilterSelectAll: [{ type: core.Output, args: ['onFilterSelectAll',] }],
            onFilterDeSelectAll: [{ type: core.Output, args: ['onFilterDeSelectAll',] }],
            onAddFilterNewItem: [{ type: core.Output, args: ['onAddFilterNewItem',] }],
            itemTempl: [{ type: core.ContentChild, args: [Item,] }],
            badgeTempl: [{ type: core.ContentChild, args: [Badge,] }],
            searchTempl: [{ type: core.ContentChild, args: [Search,] }],
            searchInput: [{ type: core.ViewChild, args: ['searchInput',] }],
            selectedListElem: [{ type: core.ViewChild, args: ['selectedList',] }]
        };
        return AngularMultiSelect;
    }());
    var AngularMultiSelectModule = /** @class */ (function () {
        function AngularMultiSelectModule() {
        }
        AngularMultiSelectModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, forms.FormsModule],
                        declarations: [AngularMultiSelect, ClickOutsideDirective, ScrollDirective, styleDirective, ListFilterPipe, Item, TemplateRenderer, Badge, Search, setPosition, VirtualScrollComponent, CIcon],
                        exports: [AngularMultiSelect, ClickOutsideDirective, ScrollDirective, styleDirective, ListFilterPipe, Item, TemplateRenderer, Badge, Search, setPosition, VirtualScrollComponent, CIcon],
                        providers: [DataService]
                    },] }
        ];
        return AngularMultiSelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.AngularMultiSelect = AngularMultiSelect;
    exports.ClickOutsideDirective = ClickOutsideDirective;
    exports.ListFilterPipe = ListFilterPipe;
    exports.Item = Item;
    exports.TemplateRenderer = TemplateRenderer;
    exports.AngularMultiSelectModule = AngularMultiSelectModule;
    exports.ɵc = ScrollDirective;
    exports.ɵe = setPosition;
    exports.ɵd = styleDirective;
    exports.ɵf = Badge;
    exports.ɵh = CIcon;
    exports.ɵg = Search;
    exports.ɵb = DROPDOWN_CONTROL_VALIDATION;
    exports.ɵa = DROPDOWN_CONTROL_VALUE_ACCESSOR;
    exports.ɵi = DataService;
    exports.ɵj = VirtualScrollComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,